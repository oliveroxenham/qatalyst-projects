'use client';

import { useState, useRef, useEffect } from 'react';
import { useTranslation } from 'react-i18next';
import { Button } from '@/components/ui/button';
import { Card } from '@/components/ui/card';
import { Input } from '@/components/ui/input';
import { getProjectId } from '@/mock/data';
import ReactMarkdown from 'react-markdown';
import remarkGfm from 'remark-gfm';
import {
  FileIcon,
  Send,
  Plus,
  Trash2,
  GripVertical,
  FileText,
  Download,
  Brain,
  PenLine,
  Edit,
  EyeIcon,
  Code,
} from 'lucide-react';
import QatalystAiIcon from '@/public/icons/AI-icon.svg';
import React from 'react';
import Logo from '@/public/icons/logo.svg';
import Image from 'next/image';
import { Textarea } from '@/components/ui/textarea';
import { TopBar } from '@/components/topbar';
import { ThemeSwitcher } from '@/components/theme-switcher';
import { ProjectInfoTooltip } from '@/components/project-info-tooltip';
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
  DialogFooter,
} from '@/components/ui/dialog';
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuTrigger,
} from '@/components/ui/dropdown-menu';
import {
  Tooltip,
  TooltipContent,
  TooltipProvider,
  TooltipTrigger,
} from '@/components/ui/tooltip';
import { DndProvider, useDrag, useDrop } from 'react-dnd';
import { HTML5Backend } from 'react-dnd-html5-backend';

// Custom QatalystResponse component for report builder
function QatalystResponse({
  title,
  prompt,
  response,
}: {
  title?: string;
  prompt: string;
  response: string;
}) {
  return (
    <div className="border rounded-md p-4 bg-background">
      <div className="flex items-start space-x-3 mb-4">
        <div className="rounded-full bg-blaze-orange-500 flex items-center justify-center p-1.5 mt-1">
          <Logo className="w-4 h-4 fill-white" />
        </div>
        <div>
          {title && <h3 className="font-semibold mb-1">{title}</h3>}
          <p className="text-sm text-muted-foreground font-medium">
            Prompt: {prompt}
          </p>
        </div>
      </div>
      <div className="pl-10">
        <p className="text-sm">{response}</p>
      </div>
    </div>
  );
}

// Define TypeScript interfaces for report data
interface SdgContribution {
  sdg: number;
  name: string;
  contribution: string;
}

interface EsgBenefits {
  environmentalBenefits: string[];
  socialBenefits: string[];
  governanceBenefits: string[];
}

interface ReportData {
  projectSummary: Record<string, string>;
  financialOverview: Record<string, string>;
  esgBenefits: EsgBenefits;
  sdgContributions: SdgContribution[];
  executiveSummary: string;
}

// Section types for customizable report
type SectionType =
  | 'executiveSummary'
  | 'projectSummary'
  | 'financialOverview'
  | 'financialAssessment'
  | 'esgAssessment'
  | 'sdgContributions'
  | 'customText'
  | 'aiGenerated';

interface CoverPage {
  title: string;
  subtitle: string;
  date: string;
  image?: string;
  companyLogo?: string;
  companyName?: string;
  customFields?: { [key: string]: string };
}

interface ReportSection {
  id: string;
  type: SectionType;
  title: string;
  content?: string;
  prompt?: string;
  isGenerating?: boolean;
  includeSources?: boolean;
}

// Mock assessment sources data
const mockFinancialAssessmentSources = [
  {
    id: '1',
    name: 'Project Financial Statement 2024.pdf',
    description:
      'Annual financial projections document for the Tonle Sap project',
  },
  {
    id: '2',
    name: 'Carbon Credit Market Analysis Q1 2025.xlsx',
    description:
      'Market analysis for carbon credit pricing and volume estimates',
  },
  {
    id: '3',
    name: 'Investment Memorandum - Tonle Sap.docx',
    description:
      'Detailed project investment proposal with financial projections',
  },
  {
    id: '4',
    name: 'Operational Cost Breakdown.pdf',
    description:
      'Detailed breakdown of project operational costs and sustainability metrics',
  },
];

const mockEsgAssessmentSources = [
  {
    id: '1',
    name: 'Environmental Impact Assessment 2024.pdf',
    description:
      'Comprehensive evaluation of environmental impacts and mitigation strategies',
  },
  {
    id: '2',
    name: 'Community Engagement Report.docx',
    description:
      'Documentation of community consultations and social impact projections',
  },
  {
    id: '3',
    name: 'Biodiversity Baseline Study.pdf',
    description: 'Scientific assessment of biodiversity in the project area',
  },
  {
    id: '4',
    name: 'Governance Structure and Compliance.pdf',
    description:
      'Project governance framework and regulatory compliance documentation',
  },
];

// Draggable section component
const DraggableSection = ({
  section,
  index,
  moveItem,
  toggleSources,
  removeSection,
  onEditSection,
}: {
  section: ReportSection;
  index: number;
  moveItem: (dragIndex: number, hoverIndex: number) => void;
  toggleSources: (id: string) => void;
  removeSection: (id: string) => void;
  moveSection: (id: string, direction: 'up' | 'down') => void;
  onEditSection: (id: string) => void;
}) => {
  const ref = useRef<HTMLDivElement>(null);

  const [{ isDragging }, drag] = useDrag({
    type: 'REPORT_SECTION',
    item: { id: section.id, index },
    collect: (monitor) => ({
      isDragging: monitor.isDragging(),
    }),
  });

  const [, drop] = useDrop({
    accept: 'REPORT_SECTION',
    hover: (item: { id: string; index: number }, monitor) => {
      if (!ref.current) {
        return;
      }

      const dragIndex = item.index;
      const hoverIndex = index;

      // Don't replace items with themselves
      if (dragIndex === hoverIndex) {
        return;
      }

      // Determine rectangle on screen
      const hoverBoundingRect = ref.current.getBoundingClientRect();

      // Get vertical middle
      const hoverMiddleY =
        (hoverBoundingRect.bottom - hoverBoundingRect.top) / 2;

      // Determine mouse position
      const clientOffset = monitor.getClientOffset();

      // Get pixels to the top
      const hoverClientY = clientOffset!.y - hoverBoundingRect.top;

      // Only perform the move when the mouse has crossed half of the items height
      // When dragging downwards, only move when the cursor is below 50%
      // When dragging upwards, only move when the cursor is above 50%

      // Dragging downwards
      if (dragIndex < hoverIndex && hoverClientY < hoverMiddleY) {
        return;
      }

      // Dragging upwards
      if (dragIndex > hoverIndex && hoverClientY > hoverMiddleY) {
        return;
      }

      // Time to actually perform the action
      moveItem(dragIndex, hoverIndex);

      // Note: we're mutating the monitor item here!
      // Generally it's better to avoid mutations,
      // but it's good here for the sake of performance
      // to avoid expensive index searches.
      item.index = hoverIndex;
    },
  });

  drag(drop(ref));

  return (
    <div
      ref={ref}
      className={`flex items-center p-2 border rounded-md bg-background ${
        isDragging ? 'opacity-50 border-dashed border-primary' : ''
      } hover:border-primary transition-colors duration-200`}
    >
      <TooltipProvider>
        <Tooltip>
          <TooltipTrigger asChild>
            <div className="mr-2 text-muted-foreground cursor-grab flex hover:text-primary">
              <GripVertical className="h-5 w-5" />
            </div>
          </TooltipTrigger>
          <TooltipContent>
            <p>Drag to reorder</p>
          </TooltipContent>
        </Tooltip>
      </TooltipProvider>
      <div className="flex-1 font-medium">{section.title}</div>
      <div className="flex items-center space-x-2">
        {(section.type === 'financialAssessment' ||
          section.type === 'esgAssessment') && (
          <div className="flex items-center space-x-1">
            <input
              type="checkbox"
              id={`sources-${section.id}`}
              checked={section.includeSources}
              onChange={() => toggleSources(section.id)}
              className="rounded border-gray-300 text-primary focus:ring-primary"
            />
            <label
              htmlFor={`sources-${section.id}`}
              className="text-xs text-muted-foreground"
            >
              Include Sources
            </label>
          </div>
        )}
        <div className="flex space-x-1">
          <Button
            size="icon"
            variant="ghost"
            className="h-8 w-8 hover:text-primary"
            onClick={() => onEditSection(section.id)}
          >
            <Edit className="h-4 w-4" />
          </Button>
          <Button
            size="icon"
            variant="ghost"
            className="h-8 w-8 text-destructive hover:text-destructive"
            onClick={() => removeSection(section.id)}
          >
            <Trash2 className="h-4 w-4" />
          </Button>
        </div>
      </div>
    </div>
  );
};

const mockFinancialAssessmentData = [
  {
    criterion: 'Project Value',
    assessment:
      'The project value was calculated to be $25 million based on carbon credit projections, operational costs, and comparable project valuation metrics.',
    value: '$25,000,000',
  },
  {
    criterion: 'Cost of Production',
    assessment:
      'The cost of production analysis shows a cost per carbon credit of $4.80, which is below the industry average of $5.70 for comparable REDD+ projects.',
    value: '$4.80 per credit',
  },
  {
    criterion: 'Revenue Projections',
    assessment:
      'Based on conservative carbon credit price forecasts, the project is expected to generate $10.5 million in annual revenue with a steady growth trajectory of 4% year-over-year.',
    value: '$10,500,000 per year',
  },
  {
    criterion: 'Capital Expense Intensity',
    assessment:
      'The project has a capital expense intensity of $22.06 per tCOâ‚‚e, indicating efficient use of capital for carbon reduction.',
    value: '$22.06 per tCOâ‚‚e',
  },
  {
    criterion: 'Operating Expense Intensity',
    assessment:
      'Annual operating expenses amount to $1.50 per tCOâ‚‚e, which is favorable compared to the industry benchmark of $1.85 per tCOâ‚‚e.',
    value: '$1.50 per tCOâ‚‚e',
  },
  {
    criterion: 'Breakeven Timeline',
    assessment:
      'With current carbon pricing and cost projections, the project is expected to reach breakeven in 3.4 years.',
    value: '3.4 years',
  },
];

const mockEsgAssessmentData = {
  environmentalImpact: {
    assessment:
      'The project will protect 566,560 hectares of critical forest habitat, conserve biodiversity including 28 endangered species, and preserve water quality in the Tonle Sap Lake ecosystem.',
    rating: 'Satisfactory',
  },
  socialImpact: {
    assessment:
      'The project will provide employment for 120 local community members, improve livelihoods for 1,500 households, and develop community infrastructure including schools and health centers.',
    rating: 'Satisfactory',
  },
  governance: {
    assessment:
      'The project has established a strong governance framework with community-led monitoring programs and transparent benefit-sharing mechanisms.',
    rating: 'Satisfactory',
  },
  communityEngagement: {
    assessment:
      'While community engagement processes have been established, there are concerns about the inclusivity of decision-making processes and representation of indigenous communities.',
    rating: 'Investigate',
  },
};

// Mock report data
const mockReportData: ReportData = {
  projectSummary: {
    projectName: 'Tonle Sap Flooded Forest Protection',
    country: 'Cambodia',
    projectType: 'REDD+',
    startDate: '2025-04-01',
    status: 'Active',
    projectArea: '566,560 hectares',
    creditsIssued: '21,171,578 tCOâ‚‚e',
    annualReductions: '704,000 tCOâ‚‚e/year',
  },
  financialOverview: {
    projectValue: '$25,000,000',
    capitalExpense: '$12,500,000',
    operatingExpense: '$850,000/year',
    revenueProjection: '$10,500,000/year',
    breakEvenPoint: '3.4 years',
    carbonPriceAssumption: '$15/tCOâ‚‚e',
  },
  esgBenefits: {
    environmentalBenefits: [
      'Protection of 566,560 hectares of critical forest habitat',
      'Conservation of biodiversity including 28 endangered species',
      'Preservation of water quality in the Tonle Sap Lake ecosystem',
      'Reduced deforestation rate by 85% compared to baseline',
    ],
    socialBenefits: [
      'Employment for 120 local community members',
      'Improved livelihoods for 1,500 households through sustainable forestry practices',
      'Development of community infrastructure including 5 schools and 3 health centers',
      'Training programs reaching 2,000 community members',
    ],
    governanceBenefits: [
      'Strengthened local governance of natural resources',
      'Community-led forest monitoring program',
      'Transparent benefit-sharing mechanism with local stakeholders',
      'Regular audits and third-party verification',
    ],
  },
  sdgContributions: [
    { sdg: 1, name: 'No Poverty', contribution: 'Significant' },
    { sdg: 13, name: 'Climate Action', contribution: 'Major' },
    { sdg: 15, name: 'Life on Land', contribution: 'Major' },
    { sdg: 6, name: 'Clean Water and Sanitation', contribution: 'Moderate' },
    {
      sdg: 8,
      name: 'Decent Work and Economic Growth',
      contribution: 'Moderate',
    },
  ],
  executiveSummary: `
# Executive Summary

The **Tonle Sap Flooded Forest Protection project** represents a significant opportunity to generate carbon credits through the protection of critical forest ecosystems in Cambodia while delivering substantial environmental and social co-benefits.

## Key Highlights

- **Carbon Credits**: Annual generation potential of 704,000 tCOâ‚‚e
- **Total Issuance**: Expected 21,171,578 tCOâ‚‚e over project lifetime
- **Financial Return**: Attractive with breakeven point of 3.4 years
- **Biodiversity**: Protection of habitat for 28 endangered species
- **Community Impact**: Supporting 1,500 local households

Beyond carbon benefits, the project contributes significantly to biodiversity conservation, while also supporting sustainable livelihoods through employment, infrastructure development, and capacity building.

The project's strong governance framework, including community-led monitoring and transparent benefit-sharing mechanisms, ensures long-term sustainability and accountability to both investors and local stakeholders.

> We recommend this project as a high-quality investment opportunity that aligns environmental and social impact with strong financial returns.
  `,
};

export function ReportBuilderClient({ projectId }: { projectId: string }) {
  const { t } = useTranslation();
  const [inputValue, setInputValue] = useState('');
  const [isGenerating, setIsGenerating] = useState(false);
  const [generatedReport, setGeneratedReport] = useState<ReportData | null>(
    null
  );
  const [reportSections, setReportSections] = useState<ReportSection[]>([]);
  const [isCustomizing, setIsCustomizing] = useState(false);
  const [newSectionTitle, setNewSectionTitle] = useState('');
  const [newSectionPrompt, setNewSectionPrompt] = useState('');
  const [newSectionContent, setNewSectionContent] = useState('');
  const [addSectionType, setAddSectionType] =
    useState<SectionType>('customText');
  const [addSectionDialogOpen, setAddSectionDialogOpen] = useState(false);
  const [editSectionDialogOpen, setEditSectionDialogOpen] = useState(false);
  const [editingSectionId, setEditingSectionId] = useState<string | null>(null);
  const [editSectionTitle, setEditSectionTitle] = useState('');
  const [editSectionPrompt, setEditSectionPrompt] = useState('');
  const [editSectionContent, setEditSectionContent] = useState('');
  const [markdownPreview, setMarkdownPreview] = useState(false);
  const [coverPageDialogOpen, setCoverPageDialogOpen] = useState(false);
  const [hasCoverPage, setHasCoverPage] = useState(false);
  const [coverPage, setCoverPage] = useState<CoverPage>({
    title: '',
    subtitle: '',
    date: new Date().toISOString().split('T')[0],
    companyName: 'Qatalyst',
    customFields: {},
  });
  const inputRef = useRef<HTMLInputElement>(null);
  const project = getProjectId(projectId);

  // Log the project data to ensure we have the image URL
  useEffect(() => {
    if (project) {
      console.log('Project data loaded:', project);
    }
  }, [project]);

  // Generate a unique ID for sections
  const generateId = () =>
    `section-${Date.now()}-${Math.random().toString(36).substring(2, 9)}`;

  useEffect(() => {
    if (inputRef.current) {
      inputRef.current.focus();
    }
  }, []);

  // Create default sections when a report is generated
  useEffect(() => {
    if (generatedReport && reportSections.length === 0) {
      setReportSections([
        {
          id: generateId(),
          type: 'executiveSummary',
          title: 'Executive Summary',
        },
        { id: generateId(), type: 'projectSummary', title: 'Project Summary' },
        {
          id: generateId(),
          type: 'financialOverview',
          title: 'Financial Overview',
        },
        {
          id: generateId(),
          type: 'financialAssessment',
          title: 'Financial Assessment',
          includeSources: false,
        },
        {
          id: generateId(),
          type: 'esgAssessment',
          title: 'ESG Assessment',
          includeSources: false,
        },
        {
          id: generateId(),
          type: 'sdgContributions',
          title: 'SDG Contributions',
        },
      ]);

      // Initialize cover page with project data
      setCoverPage({
        title: project?.name || generatedReport.projectSummary.projectName,
        subtitle: `${generatedReport.projectSummary.projectType} Project Report`,
        date: new Date().toLocaleDateString(),
        image: project?.imgUrl,
        companyName: 'Qatalyst',
        customFields: {
          Location: generatedReport.projectSummary.country,
          'Project Area': generatedReport.projectSummary.projectArea,
          'Prepared By': 'Qatalyst AI',
        },
      });
    }
  }, [generatedReport, project]);

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    if (!inputValue.trim()) return;

    setIsGenerating(true);
    setReportSections([]);

    // Simulate AI processing time
    setTimeout(() => {
      setGeneratedReport(mockReportData);
      setIsGenerating(false);
    }, 3000);
  };

  const handleExampleClick = (example: string) => {
    setInputValue(example);
    if (inputRef.current) {
      inputRef.current.focus();
    }
  };

  const addSection = () => {
    if (addSectionType === 'customText' && !newSectionTitle) {
      return;
    }

    const newSection: ReportSection = {
      id: generateId(),
      type: addSectionType,
      title:
        newSectionTitle || t(`reportBuilder.addSectionTypes.${addSectionType}`),
      content: addSectionType === 'customText' ? newSectionContent : undefined,
      prompt: addSectionType === 'aiGenerated' ? newSectionPrompt : undefined,
      isGenerating: addSectionType === 'aiGenerated' ? true : undefined,
    };

    setReportSections([...reportSections, newSection]);
    setAddSectionDialogOpen(false);

    // Reset form
    setNewSectionTitle('');
    setNewSectionPrompt('');
    setNewSectionContent('');
    setAddSectionType('customText');

    // If it's an AI-generated section, simulate generation
    if (addSectionType === 'aiGenerated') {
      setTimeout(() => {
        setReportSections((sections) =>
          sections.map((section) =>
            section.id === newSection.id
              ? {
                  ...section,
                  isGenerating: false,
                  content: `## ${newSectionTitle}

Based on your prompt: *"${newSectionPrompt}"*

The **${
                    project?.name || 'project'
                  }** demonstrates strong potential for both environmental impact and financial returns. Based on the assessment of similar projects in the region, we anticipate this initiative will deliver approximately **15% higher carbon credit yields** than the regional average, making it an attractive investment opportunity.

### Key Findings:

- Carbon yield potential: **15% above regional average**
- Expected ROI: **12.8%** (compared to 9.3% industry average)
- Project timeline optimizations could increase efficiency by **7-10%**

> This analysis is preliminary and based on current market conditions. Further due diligence is recommended.`,
                }
              : section
          )
        );
      }, 3000);
    }
  };

  const removeSection = (id: string) => {
    setReportSections(reportSections.filter((section) => section.id !== id));
  };

  const moveSection = (id: string, direction: 'up' | 'down') => {
    const index = reportSections.findIndex((section) => section.id === id);
    if (
      (direction === 'up' && index === 0) ||
      (direction === 'down' && index === reportSections.length - 1)
    ) {
      return;
    }

    const newSections = [...reportSections];
    const newIndex = direction === 'up' ? index - 1 : index + 1;
    const [removed] = newSections.splice(index, 1);
    newSections.splice(newIndex, 0, removed);
    setReportSections(newSections);
  };

  const moveItem = (dragIndex: number, hoverIndex: number) => {
    const newSections = [...reportSections];
    const dragItem = newSections[dragIndex];
    newSections.splice(dragIndex, 1);
    newSections.splice(hoverIndex, 0, dragItem);
    setReportSections(newSections);
  };

  const toggleSources = (id: string) => {
    setReportSections(
      reportSections.map((section) =>
        section.id === id
          ? { ...section, includeSources: !section.includeSources }
          : section
      )
    );
  };

  const openEditSectionDialog = (id: string) => {
    const sectionToEdit = reportSections.find((section) => section.id === id);
    if (sectionToEdit) {
      setEditingSectionId(id);
      setEditSectionTitle(sectionToEdit.title);

      // Handle different section types
      if (sectionToEdit.type === 'customText') {
        setEditSectionContent(sectionToEdit.content || '');
      } else if (sectionToEdit.type === 'aiGenerated') {
        setEditSectionPrompt(sectionToEdit.prompt || '');
        setEditSectionContent(sectionToEdit.content || '');
      } else if (sectionToEdit.type === 'executiveSummary') {
        setEditSectionContent(generatedReport?.executiveSummary || '');
      } else {
        // For other section types, set content based on the type
        setEditSectionContent(sectionToEdit.content || '');
      }

      setEditSectionDialogOpen(true);
    }
  };

  const updateSection = () => {
    if (!editingSectionId) return;

    const sectionToEdit = reportSections.find(
      (section) => section.id === editingSectionId
    );
    if (!sectionToEdit) return;

    // Handle section update based on type
    if (sectionToEdit.type === 'executiveSummary') {
      // For executive summary, update the mock data and the section
      if (generatedReport) {
        setGeneratedReport({
          ...generatedReport,
          executiveSummary: editSectionContent,
        });
      }

      setReportSections(
        reportSections.map((section) =>
          section.id === editingSectionId
            ? { ...section, title: editSectionTitle }
            : section
        )
      );
    } else if (
      sectionToEdit.type === 'customText' ||
      sectionToEdit.type === 'aiGenerated'
    ) {
      // For text sections, update the content directly
      setReportSections(
        reportSections.map((section) =>
          section.id === editingSectionId
            ? {
                ...section,
                title: editSectionTitle,
                content: editSectionContent,
                prompt:
                  section.type === 'aiGenerated'
                    ? editSectionPrompt
                    : section.prompt,
                isGenerating:
                  section.type === 'aiGenerated' &&
                  editSectionPrompt !== section.prompt
                    ? true
                    : false,
              }
            : section
        )
      );

      // If it's an AI-generated section and the prompt has changed, simulate generation
      if (
        sectionToEdit.type === 'aiGenerated' &&
        editSectionPrompt !== sectionToEdit.prompt
      ) {
        setTimeout(() => {
          setReportSections((sections) =>
            sections.map((section) =>
              section.id === editingSectionId
                ? {
                    ...section,
                    isGenerating: false,
                    content: `## ${editSectionTitle}

Based on your updated prompt: *"${editSectionPrompt}"*

The **${
                      project?.name || 'project'
                    }** demonstrates strong potential for both environmental impact and financial returns. Based on the updated assessment of similar projects in the region, we anticipate this initiative will deliver approximately **18% higher carbon credit yields** than the regional average, making it an even more attractive investment opportunity than previously estimated.

### Updated Findings:

- Carbon yield potential: **18% above regional average** (â†‘3% from previous estimate)
- Expected ROI: **14.2%** (compared to 9.3% industry average)
- Project timeline optimizations could increase efficiency by **9-12%**
- Additional co-benefits identified in biodiversity conservation

> This analysis includes the latest market data and reflects increased confidence in project performance.`,
                  }
                : section
            )
          );
        }, 3000);
      }
    } else {
      // For other section types, just update the title
      setReportSections(
        reportSections.map((section) =>
          section.id === editingSectionId
            ? {
                ...section,
                title: editSectionTitle,
                content: editSectionContent,
              }
            : section
        )
      );
    }

    setEditSectionDialogOpen(false);
  };

  return (
    <div>
      <TopBar title="reportBuilder.title">
        <div className="flex justify-between items-center w-full gap-2">
          {project && (
            <ProjectInfoTooltip
              name={project.name}
              sourceType={project.sourceType}
              originalId={project.id}
              projectType={project.projectType}
            />
          )}
          <div className="flex flex-row gap-2">
            <ThemeSwitcher />
          </div>
        </div>
      </TopBar>
      <div className="p-6 space-y-6">
        <div className="space-y-2">
          <p className="text-muted-foreground">
            {t('reportBuilder.description')}
          </p>
        </div>

        <form onSubmit={handleSubmit} className="space-y-4">
          <div className="flex gap-2">
            <Input
              ref={inputRef}
              value={inputValue}
              onChange={(e) => setInputValue(e.target.value)}
              placeholder={t('reportBuilder.inputPlaceholder')}
              className="flex-1"
              disabled={isGenerating}
            />
            <Button type="submit" disabled={!inputValue.trim() || isGenerating}>
              {isGenerating ? (
                t('reportBuilder.generating')
              ) : (
                <Send className="h-4 w-4" />
              )}
            </Button>
          </div>

          <div className="space-y-2">
            <p className="text-sm font-medium">
              {t('reportBuilder.examples')}:
            </p>
            <div className="flex flex-wrap gap-2">
              {(
                t('reportBuilder.examplePrompts', {
                  returnObjects: true,
                }) as string[]
              ).map((example, i) => (
                <Button
                  key={i}
                  variant="outline"
                  size="sm"
                  onClick={() => handleExampleClick(example)}
                  disabled={isGenerating}
                >
                  {example}
                </Button>
              ))}
            </div>
          </div>
        </form>

        {isGenerating && (
          <div className="flex items-center justify-center p-12">
            <div className="flex flex-col items-center gap-4">
              <QatalystAiIcon className="h-12 w-12 animate-pulse" />
              <p>{t('reportBuilder.generating')}</p>
            </div>
          </div>
        )}

        {generatedReport && !isGenerating && (
          <div className="space-y-4">
            <div className="flex justify-between items-center">
              <h2 className="text-xl font-semibold">
                {t('reportBuilder.reportPreview')}
              </h2>
              <div className="flex space-x-2">
                <Button
                  variant={isCustomizing ? 'outline' : 'default'}
                  onClick={() => setIsCustomizing(!isCustomizing)}
                >
                  <PenLine className="mr-2 h-4 w-4" />
                  {t('reportBuilder.customizeReport')}
                </Button>

                <DropdownMenu>
                  <DropdownMenuTrigger asChild>
                    <Button>
                      <Download className="mr-2 h-4 w-4" />
                      {t('reportBuilder.downloadReport')}
                    </Button>
                  </DropdownMenuTrigger>
                  <DropdownMenuContent>
                    <DropdownMenuItem>
                      <FileText className="mr-2 h-4 w-4" />
                      {t('reportBuilder.downloadAsWord')}
                    </DropdownMenuItem>
                    <DropdownMenuItem>
                      <FileIcon className="mr-2 h-4 w-4" />
                      {t('reportBuilder.downloadAsPdf')}
                    </DropdownMenuItem>
                  </DropdownMenuContent>
                </DropdownMenu>
              </div>
            </div>

            {isCustomizing && (
              <Card className="p-4 mb-4">
                <div className="flex justify-between items-center mb-4">
                  <h3 className="font-medium">
                    {t('reportBuilder.reportOutline')}
                  </h3>
                  <div className="flex space-x-2">
                    
                    {hasCoverPage && (
                      <Dialog
                        open={coverPageDialogOpen}
                        onOpenChange={setCoverPageDialogOpen}
                      >
                        <DialogTrigger asChild>
                          <Button size="sm" variant="outline">
                            <FileText className="mr-2 h-4 w-4" />
                            Edit Cover Page
                          </Button>
                        </DialogTrigger>
                        <DialogContent className="max-w-md">
                        <DialogHeader>
                          <DialogTitle>
                            {hasCoverPage
                              ? 'Edit Cover Page'
                              : 'Add Cover Page'}
                          </DialogTitle>
                        </DialogHeader>
                        <div className="space-y-4 py-4">
                          <div className="space-y-2">
                            <label className="font-medium">Report Title</label>
                            <Input
                              value={coverPage.title}
                              onChange={(e) =>
                                setCoverPage({
                                  ...coverPage,
                                  title: e.target.value,
                                })
                              }
                              placeholder="Enter report title"
                            />
                          </div>

                          <div className="space-y-2">
                            <label className="font-medium">Subtitle</label>
                            <Input
                              value={coverPage.subtitle}
                              onChange={(e) =>
                                setCoverPage({
                                  ...coverPage,
                                  subtitle: e.target.value,
                                })
                              }
                              placeholder="Enter report subtitle"
                            />
                          </div>

                          <div className="space-y-2">
                            <label className="font-medium">Date</label>
                            <Input
                              type="date"
                              value={coverPage.date}
                              onChange={(e) =>
                                setCoverPage({
                                  ...coverPage,
                                  date: e.target.value,
                                })
                              }
                            />
                          </div>

                          <div className="space-y-2">
                            <label className="font-medium">Company Name</label>
                            <Input
                              value={coverPage.companyName}
                              onChange={(e) =>
                                setCoverPage({
                                  ...coverPage,
                                  companyName: e.target.value,
                                })
                              }
                              placeholder="Enter company name"
                            />
                          </div>

                          <div className="space-y-2">
                            <label className="font-medium">Cover Image</label>
                            <div className="flex items-center space-x-2">
                              <Input
                                value={coverPage.image || ''}
                                onChange={(e) =>
                                  setCoverPage({
                                    ...coverPage,
                                    image: e.target.value,
                                  })
                                }
                                placeholder="Enter image URL"
                                className="flex-1"
                              />
                              {project?.imgUrl && (
                                <Button
                                  type="button"
                                  variant="outline"
                                  onClick={() =>
                                    setCoverPage({
                                      ...coverPage,
                                      image: project.imgUrl,
                                    })
                                  }
                                  className="whitespace-nowrap"
                                >
                                  Use Project Image
                                </Button>
                              )}
                            </div>
                          </div>

                          <div className="space-y-2">
                            <div className="flex justify-between items-center">
                              <label className="font-medium">
                                Additional Information
                              </label>
                            </div>
                            <div className="space-y-3 border rounded-md p-3">
                              {coverPage.customFields &&
                                Object.entries(coverPage.customFields).map(
                                  ([key, value], index) => (
                                    <div key={index} className="flex space-x-2">
                                      <Input
                                        value={key}
                                        onChange={(e) => {
                                          const updatedFields = {
                                            ...coverPage.customFields,
                                          };
                                          const oldKey = key;
                                          delete updatedFields[oldKey];
                                          updatedFields[e.target.value] = value;
                                          setCoverPage({
                                            ...coverPage,
                                            customFields: updatedFields,
                                          });
                                        }}
                                        placeholder="Field name"
                                        className="w-1/3"
                                      />
                                      <Input
                                        value={value}
                                        onChange={(e) => {
                                          const updatedFields = {
                                            ...coverPage.customFields,
                                          };
                                          updatedFields[key] = e.target.value;
                                          setCoverPage({
                                            ...coverPage,
                                            customFields: updatedFields,
                                          });
                                        }}
                                        placeholder="Value"
                                        className="flex-1"
                                      />
                                      <Button
                                        type="button"
                                        variant="ghost"
                                        className="px-2"
                                        onClick={() => {
                                          const updatedFields = {
                                            ...coverPage.customFields,
                                          };
                                          delete updatedFields[key];
                                          setCoverPage({
                                            ...coverPage,
                                            customFields: updatedFields,
                                          });
                                        }}
                                      >
                                        <Trash2 className="h-4 w-4" />
                                      </Button>
                                    </div>
                                  )
                                )}

                              <Button
                                type="button"
                                variant="outline"
                                size="sm"
                                className="w-full mt-2"
                                onClick={() => {
                                  const updatedFields = {
                                    ...coverPage.customFields,
                                  };
                                  updatedFields[
                                    `Field ${
                                      Object.keys(updatedFields).length + 1
                                    }`
                                  ] = '';
                                  setCoverPage({
                                    ...coverPage,
                                    customFields: updatedFields,
                                  });
                                }}
                              >
                                <Plus className="h-4 w-4 mr-1" />
                                Add Field
                              </Button>
                            </div>
                          </div>
                        </div>
                        <DialogFooter>
                          <div className="flex justify-between w-full">
                            {hasCoverPage && (
                              <Button
                                type="button"
                                variant="outline"
                                onClick={() => {
                                  setHasCoverPage(false);
                                  setCoverPageDialogOpen(false);
                                  setAddSectionDialogOpen(true);
                                }}
                              >
                                Remove Cover Page
                              </Button>
                            )}
                            <Button
                              onClick={() => {
                                setHasCoverPage(true);
                                setCoverPageDialogOpen(false);
                                setAddSectionDialogOpen(true);
                              }}
                            >
                              {hasCoverPage
                                ? 'Update Cover Page'
                                : 'Add Cover Page'}
                            </Button>
                          </div>
                        </DialogFooter>
                      </DialogContent>
                    </Dialog>

                    <Dialog
                      open={addSectionDialogOpen}
                      onOpenChange={setAddSectionDialogOpen}
                    >
                      <DialogTrigger asChild>
                        <Button size="sm">
                          <Plus className="mr-2 h-4 w-4" />
                          {t('reportBuilder.addSection')}
                        </Button>
                      </DialogTrigger>
                      <DialogContent>
                        <DialogHeader>
                          <DialogTitle>
                            {t('reportBuilder.addSection')}
                          </DialogTitle>
                        </DialogHeader>
                        <div className="space-y-4 py-4">
                          <div className="space-y-2">
                            <label className="font-medium">Section Type</label>
                            <div className="grid grid-cols-2 gap-2">
                              <Button
                                type="button"
                                variant={hasCoverPage ? 'default' : 'outline'}
                                className="justify-start col-span-2"
                                onClick={() => {
                                  setCoverPageDialogOpen(true);
                                  setAddSectionDialogOpen(false);
                                }}
                              >
                                <FileText className="mr-2 h-4 w-4" />
                                {hasCoverPage ? "Edit Cover Page" : "Add Cover Page"}
                              </Button>
                              <Button
                                type="button"
                                variant={
                                  addSectionType === 'customText'
                                    ? 'default'
                                    : 'outline'
                                }
                                className="justify-start"
                                onClick={() => setAddSectionType('customText')}
                              >
                                <PenLine className="mr-2 h-4 w-4" />
                                {t('reportBuilder.addSectionTypes.text')}
                              </Button>
                              <Button
                                type="button"
                                variant={
                                  addSectionType === 'aiGenerated'
                                    ? 'default'
                                    : 'outline'
                                }
                                className="justify-start"
                                onClick={() => setAddSectionType('aiGenerated')}
                              >
                                <Brain className="mr-2 h-4 w-4" />
                                {t('reportBuilder.addSectionTypes.ai')}
                              </Button>
                              <Button
                                type="button"
                                variant={
                                  addSectionType === 'projectSummary'
                                    ? 'default'
                                    : 'outline'
                                }
                                className="justify-start"
                                onClick={() =>
                                  setAddSectionType('projectSummary')
                                }
                              >
                                <FileText className="mr-2 h-4 w-4" />
                                {t(
                                  'reportBuilder.addSectionTypes.projectSummary'
                                )}
                              </Button>
                              <Button
                                type="button"
                                variant={
                                  addSectionType === 'financialOverview'
                                    ? 'default'
                                    : 'outline'
                                }
                                className="justify-start"
                                onClick={() =>
                                  setAddSectionType('financialOverview')
                                }
                              >
                                <FileText className="mr-2 h-4 w-4" />
                                {t(
                                  'reportBuilder.addSectionTypes.financialOverview'
                                )}
                              </Button>
                              <Button
                                type="button"
                                variant={
                                  addSectionType === 'financialAssessment'
                                    ? 'default'
                                    : 'outline'
                                }
                                className="justify-start"
                                onClick={() =>
                                  setAddSectionType('financialAssessment')
                                }
                              >
                                <FileText className="mr-2 h-4 w-4" />
                                {t(
                                  'reportBuilder.addSectionTypes.financialAssessment'
                                )}
                              </Button>
                              <Button
                                type="button"
                                variant={
                                  addSectionType === 'esgAssessment'
                                    ? 'default'
                                    : 'outline'
                                }
                                className="justify-start"
                                onClick={() =>
                                  setAddSectionType('esgAssessment')
                                }
                              >
                                <FileText className="mr-2 h-4 w-4" />
                                {t(
                                  'reportBuilder.addSectionTypes.esgAssessment'
                                )}
                              </Button>
                            </div>
                          </div>

                          {addSectionType === 'customText' && (
                            <>
                              <div className="space-y-2">
                                <label className="font-medium">
                                  {t('reportBuilder.sectionTitle')}
                                </label>
                                <Input
                                  value={newSectionTitle}
                                  onChange={(e) =>
                                    setNewSectionTitle(e.target.value)
                                  }
                                  placeholder="Enter section title..."
                                />
                              </div>
                              <div className="space-y-2">
                                <div className="flex justify-between items-center mb-2">
                                  <label className="font-medium">Content</label>
                                  <div className="flex items-center space-x-2">
                                    <span className="text-xs text-muted-foreground mr-1">
                                      Markdown supported
                                    </span>
                                    <Button
                                      type="button"
                                      size="sm"
                                      variant={
                                        markdownPreview ? 'default' : 'outline'
                                      }
                                      onClick={() =>
                                        setMarkdownPreview(!markdownPreview)
                                      }
                                    >
                                      {markdownPreview ? (
                                        <Code className="h-4 w-4 mr-1" />
                                      ) : (
                                        <EyeIcon className="h-4 w-4 mr-1" />
                                      )}
                                      {markdownPreview ? 'Edit' : 'Preview'}
                                    </Button>
                                  </div>
                                </div>

                                {markdownPreview ? (
                                  <div className="border rounded-md p-4 min-h-[150px] prose prose-sm dark:prose-invert max-w-none">
                                    <ReactMarkdown remarkPlugins={[remarkGfm]}>
                                      {newSectionContent}
                                    </ReactMarkdown>
                                  </div>
                                ) : (
                                  <Textarea
                                    value={newSectionContent}
                                    onChange={(e) =>
                                      setNewSectionContent(e.target.value)
                                    }
                                    placeholder="Enter section content using Markdown..."
                                    className="min-h-[200px] font-mono text-sm"
                                  />
                                )}

                                <div className="text-xs text-muted-foreground mt-2">
                                  <p>
                                    Use Markdown for formatting:{' '}
                                    <code>**bold**</code>, <code>*italic*</code>
                                    , <code>[link](url)</code>,{' '}
                                    <code>![image](url)</code>,{' '}
                                    <code># Heading</code>, <code>- list</code>
                                  </p>
                                </div>
                              </div>
                            </>
                          )}

                          {addSectionType === 'aiGenerated' && (
                            <>
                              <div className="space-y-2">
                                <label className="font-medium">
                                  {t('reportBuilder.sectionTitle')}
                                </label>
                                <Input
                                  value={newSectionTitle}
                                  onChange={(e) =>
                                    setNewSectionTitle(e.target.value)
                                  }
                                  placeholder="Enter section title..."
                                />
                              </div>
                              <div className="space-y-2">
                                <label className="font-medium">
                                  {t('reportBuilder.promptForSection')}
                                </label>
                                <Textarea
                                  value={newSectionPrompt}
                                  onChange={(e) =>
                                    setNewSectionPrompt(e.target.value)
                                  }
                                  placeholder="E.g. Analyze the carbon credit price projections for this project..."
                                  className="min-h-[100px]"
                                />
                              </div>
                            </>
                          )}
                        </div>
                        <DialogFooter>
                          <Button
                            onClick={addSection}
                            disabled={
                              (addSectionType === 'customText' &&
                                !newSectionTitle) ||
                              (addSectionType === 'aiGenerated' &&
                                (!newSectionTitle || !newSectionPrompt))
                            }
                          >
                            {t('reportBuilder.addSection')}
                          </Button>
                        </DialogFooter>
                      </DialogContent>
                    </Dialog>

                    {/* Edit Section Dialog */}
                    <Dialog
                      open={editSectionDialogOpen}
                      onOpenChange={setEditSectionDialogOpen}
                    >
                      <DialogContent>
                        <DialogHeader>
                          <DialogTitle>
                            {t('reportBuilder.editSection')}
                          </DialogTitle>
                        </DialogHeader>
                        <div className="space-y-4 py-4">
                          {editingSectionId && (
                            <>
                              <div className="space-y-2">
                                <label className="font-medium">
                                  {t('reportBuilder.sectionTitle')}
                                </label>
                                <Input
                                  value={editSectionTitle}
                                  onChange={(e) =>
                                    setEditSectionTitle(e.target.value)
                                  }
                                  placeholder="Enter section title..."
                                />
                              </div>

                              {(() => {
                                const sectionType = reportSections.find(
                                  (s) => s.id === editingSectionId
                                )?.type;

                                if (
                                  sectionType === 'customText' ||
                                  sectionType === 'executiveSummary'
                                ) {
                                  return (
                                    <div className="space-y-2">
                                      <div className="flex justify-between items-center mb-2">
                                        <label className="font-medium">
                                          Content
                                        </label>
                                        <div className="flex items-center space-x-2">
                                          <span className="text-xs text-muted-foreground mr-1">
                                            Markdown supported
                                          </span>
                                          <Button
                                            type="button"
                                            size="sm"
                                            variant={
                                              markdownPreview
                                                ? 'default'
                                                : 'outline'
                                            }
                                            onClick={() =>
                                              setMarkdownPreview(
                                                !markdownPreview
                                              )
                                            }
                                          >
                                            {markdownPreview ? (
                                              <Code className="h-4 w-4 mr-1" />
                                            ) : (
                                              <EyeIcon className="h-4 w-4 mr-1" />
                                            )}
                                            {markdownPreview
                                              ? 'Edit'
                                              : 'Preview'}
                                          </Button>
                                        </div>
                                      </div>

                                      {markdownPreview ? (
                                        <div className="border rounded-md p-4 min-h-[150px] prose prose-sm dark:prose-invert max-w-none">
                                          <ReactMarkdown
                                            remarkPlugins={[remarkGfm]}
                                          >
                                            {editSectionContent}
                                          </ReactMarkdown>
                                        </div>
                                      ) : (
                                        <Textarea
                                          value={editSectionContent}
                                          onChange={(e) =>
                                            setEditSectionContent(
                                              e.target.value
                                            )
                                          }
                                          placeholder="Enter section content using Markdown..."
                                          className="min-h-[250px] font-mono text-sm"
                                        />
                                      )}

                                      <div className="text-xs text-muted-foreground mt-2">
                                        <p>
                                          Use Markdown for formatting:{' '}
                                          <code>**bold**</code>,{' '}
                                          <code>*italic*</code>,{' '}
                                          <code>[link](url)</code>,{' '}
                                          <code>![image](url)</code>,{' '}
                                          <code># Heading</code>,{' '}
                                          <code>- list</code>
                                        </p>
                                      </div>
                                    </div>
                                  );
                                }

                                if (sectionType === 'aiGenerated') {
                                  return (
                                    <>
                                      <div className="space-y-2">
                                        <label className="font-medium">
                                          {t('reportBuilder.promptForSection')}
                                        </label>
                                        <Textarea
                                          value={editSectionPrompt}
                                          onChange={(e) =>
                                            setEditSectionPrompt(e.target.value)
                                          }
                                          placeholder="E.g. Analyze the carbon credit price projections for this project..."
                                          className="min-h-[100px]"
                                        />
                                        <p className="text-sm text-muted-foreground">
                                          Note: Changing the prompt will
                                          regenerate this section's content.
                                        </p>
                                      </div>

                                      <div className="space-y-2">
                                        <div className="flex justify-between items-center mb-2">
                                          <label className="font-medium">
                                            Content
                                          </label>
                                          <div className="flex items-center space-x-2">
                                            <span className="text-xs text-muted-foreground mr-1">
                                              Markdown supported
                                            </span>
                                            <Button
                                              type="button"
                                              size="sm"
                                              variant={
                                                markdownPreview
                                                  ? 'default'
                                                  : 'outline'
                                              }
                                              onClick={() =>
                                                setMarkdownPreview(
                                                  !markdownPreview
                                                )
                                              }
                                            >
                                              {markdownPreview ? (
                                                <Code className="h-4 w-4 mr-1" />
                                              ) : (
                                                <EyeIcon className="h-4 w-4 mr-1" />
                                              )}
                                              {markdownPreview
                                                ? 'Edit'
                                                : 'Preview'}
                                            </Button>
                                          </div>
                                        </div>

                                        {markdownPreview ? (
                                          <div className="border rounded-md p-4 min-h-[150px] prose prose-sm dark:prose-invert max-w-none">
                                            <ReactMarkdown
                                              remarkPlugins={[remarkGfm]}
                                            >
                                              {editSectionContent}
                                            </ReactMarkdown>
                                          </div>
                                        ) : (
                                          <Textarea
                                            value={editSectionContent}
                                            onChange={(e) =>
                                              setEditSectionContent(
                                                e.target.value
                                              )
                                            }
                                            placeholder="AI-generated content will appear here..."
                                            className="min-h-[200px] font-mono text-sm"
                                          />
                                        )}

                                        <div className="text-xs text-muted-foreground mt-2">
                                          <p>
                                            Use Markdown for formatting:{' '}
                                            <code>**bold**</code>,{' '}
                                            <code>*italic*</code>,{' '}
                                            <code>[link](url)</code>,{' '}
                                            <code>![image](url)</code>,{' '}
                                            <code># Heading</code>,{' '}
                                            <code>- list</code>
                                          </p>
                                        </div>
                                      </div>
                                    </>
                                  );
                                }

                                return null;
                              })()}
                            </>
                          )}
                        </div>
                        <DialogFooter>
                          <Button
                            onClick={updateSection}
                            disabled={!editSectionTitle}
                          >
                            {t('reportBuilder.updateSection')}
                          </Button>
                        </DialogFooter>
                      </DialogContent>
                    </Dialog>
                  </div>

                  <div className="space-y-2">
                    <DndProvider backend={HTML5Backend}>
                      {reportSections.map((section, index) => (
                        <DraggableSection
                          key={section.id}
                          section={section}
                          index={index}
                          moveItem={moveItem}
                          toggleSources={toggleSources}
                          removeSection={removeSection}
                          moveSection={moveSection}
                          onEditSection={openEditSectionDialog}
                        />
                      ))}
                    </DndProvider>
                  </div>
                </div>
              </Card>
            )}

            <Card className="p-6 space-y-6">
              {hasCoverPage ? (
                /* Cover Page */
                <div className="min-h-[500px] flex flex-col justify-between border-b pb-10 mb-4">
                  {/* Cover Image */}
                  {coverPage.image && (
                    <div className="w-full h-[300px] relative overflow-hidden rounded-md mb-8">
                      <Image
                        src={coverPage.image}
                        alt="Cover Image"
                        fill
                        style={{ objectFit: 'cover' }}
                        className="rounded-md"
                        priority
                      />
                    </div>
                  )}

                  {/* Cover Content */}
                  <div className="flex-1 flex flex-col justify-center items-center text-center space-y-6 py-8">
                    <h1 className="text-4xl font-bold tracking-tight">
                      {coverPage.title}
                    </h1>
                    <h2 className="text-2xl text-muted-foreground">
                      {coverPage.subtitle}
                    </h2>
                  </div>

                  {/* Cover Footer */}
                  <div className="flex flex-col space-y-4">
                    {coverPage.customFields &&
                      Object.keys(coverPage.customFields).length > 0 && (
                        <div className="grid grid-cols-2 gap-4 mb-6">
                          {Object.entries(coverPage.customFields).map(
                            ([key, value]) => (
                              <div key={key} className="flex">
                                <span className="font-medium mr-2">{key}:</span>
                                <span className="text-muted-foreground">
                                  {value}
                                </span>
                              </div>
                            )
                          )}
                        </div>
                      )}

                    <div className="flex justify-between items-center pt-4 border-t">
                      <div>
                        <p className="font-medium">{coverPage.companyName}</p>
                      </div>
                      <div>
                        <p className="text-muted-foreground">
                          {coverPage.date}
                        </p>
                      </div>
                    </div>
                  </div>
                </div>
              ) : (
                /* Report Header with Project Image (if no cover page) */
                <div className="space-y-4 border-b pb-6">
                  {project?.imgUrl && (
                    <div className="mb-4 w-full h-[200px] relative overflow-hidden rounded-md">
                      <Image
                        src={project.imgUrl}
                        alt={project?.name || 'Project Image'}
                        fill
                        style={{ objectFit: 'cover' }}
                        className="rounded-md"
                        priority
                      />
                    </div>
                  )}
                  <div>
                    <h1 className="text-2xl font-bold">
                      {project?.name ||
                        generatedReport.projectSummary.projectName}{' '}
                      - Project Report
                    </h1>
                    <p className="text-muted-foreground">
                      Generated by Qatalyst AI on{' '}
                      {new Date().toLocaleDateString()}
                    </p>
                  </div>
                </div>
              )}

              {/* Dynamic Sections */}
              {reportSections.map((section) => {
                if (section.type === 'executiveSummary') {
                  return (
                    <div key={section.id} className="space-y-2 group">
                      <div className="flex justify-between items-center">
                        <h2 className="text-xl font-semibold">
                          {section.title}
                        </h2>
                        {isCustomizing && (
                          <Button
                            size="sm"
                            variant="ghost"
                            className="opacity-0 group-hover:opacity-100"
                            onClick={() => openEditSectionDialog(section.id)}
                          >
                            <Edit className="h-4 w-4 mr-1" />
                            Edit
                          </Button>
                        )}
                      </div>
                      <div className="prose prose-sm dark:prose-invert max-w-none">
                        <ReactMarkdown remarkPlugins={[remarkGfm]}>
                          {generatedReport.executiveSummary}
                        </ReactMarkdown>
                      </div>
                    </div>
                  );
                }

                if (section.type === 'projectSummary') {
                  return (
                    <div key={section.id} className="space-y-2 group">
                      <div className="flex justify-between items-center">
                        <h2 className="text-xl font-semibold">
                          {section.title}
                        </h2>
                        {isCustomizing && (
                          <Button
                            size="sm"
                            variant="ghost"
                            className="opacity-0 group-hover:opacity-100"
                            onClick={() => openEditSectionDialog(section.id)}
                          >
                            <Edit className="h-4 w-4 mr-1" />
                            Edit Title
                          </Button>
                        )}
                      </div>
                      <div className="grid grid-cols-2 gap-4">
                        {Object.entries(generatedReport.projectSummary).map(
                          ([key, value]: [string, string]) => (
                            <div key={key} className="space-y-1">
                              <p className="text-sm font-medium">
                                {key
                                  .replace(/([A-Z])/g, ' $1')
                                  .replace(/^./, (str) => str.toUpperCase())}
                              </p>
                              <p className="text-sm">{value}</p>
                            </div>
                          )
                        )}
                      </div>
                    </div>
                  );
                }

                if (section.type === 'financialOverview') {
                  return (
                    <div key={section.id} className="space-y-2 group">
                      <div className="flex justify-between items-center">
                        <h2 className="text-xl font-semibold">
                          {section.title}
                        </h2>
                        {isCustomizing && (
                          <Button
                            size="sm"
                            variant="ghost"
                            className="opacity-0 group-hover:opacity-100"
                            onClick={() => openEditSectionDialog(section.id)}
                          >
                            <Edit className="h-4 w-4 mr-1" />
                            Edit Title
                          </Button>
                        )}
                      </div>
                      <div className="grid grid-cols-2 gap-4">
                        {Object.entries(generatedReport.financialOverview).map(
                          ([key, value]: [string, string]) => (
                            <div key={key} className="space-y-1">
                              <p className="text-sm font-medium">
                                {key
                                  .replace(/([A-Z])/g, ' $1')
                                  .replace(/^./, (str) => str.toUpperCase())}
                              </p>
                              <p className="text-sm">{value}</p>
                            </div>
                          )
                        )}
                      </div>
                    </div>
                  );
                }

                if (section.type === 'financialAssessment') {
                  return (
                    <div key={section.id} className="space-y-4 group">
                      <div className="flex justify-between items-center">
                        <h2 className="text-xl font-semibold">
                          {section.title}
                        </h2>
                        {isCustomizing && (
                          <Button
                            size="sm"
                            variant="ghost"
                            className="opacity-0 group-hover:opacity-100"
                            onClick={() => openEditSectionDialog(section.id)}
                          >
                            <Edit className="h-4 w-4 mr-1" />
                            Edit Title
                          </Button>
                        )}
                      </div>

                      <div className="overflow-hidden border rounded-md">
                        <table className="min-w-full divide-y divide-gray-200">
                          <thead className="bg-muted">
                            <tr>
                              <th
                                scope="col"
                                className="px-4 py-3 text-left text-xs font-medium text-muted-foreground uppercase tracking-wider w-1/4"
                              >
                                Criterion
                              </th>
                              <th
                                scope="col"
                                className="px-4 py-3 text-left text-xs font-medium text-muted-foreground uppercase tracking-wider w-1/4"
                              >
                                Value
                              </th>
                              <th
                                scope="col"
                                className="px-4 py-3 text-left text-xs font-medium text-muted-foreground uppercase tracking-wider w-2/4"
                              >
                                Assessment
                              </th>
                            </tr>
                          </thead>
                          <tbody className="bg-background divide-y divide-gray-200">
                            {mockFinancialAssessmentData.map((item, i) => (
                              <tr
                                key={i}
                                className={
                                  i % 2 === 0 ? 'bg-background' : 'bg-muted/30'
                                }
                              >
                                <td className="px-4 py-3 text-sm font-medium">
                                  {item.criterion}
                                </td>
                                <td className="px-4 py-3 text-sm text-muted-foreground">
                                  {item.value}
                                </td>
                                <td className="px-4 py-3 text-sm">
                                  {item.assessment}
                                </td>
                              </tr>
                            ))}
                          </tbody>
                        </table>
                      </div>

                      {section.includeSources && (
                        <div className="mt-6 pt-4 border-t">
                          <h3 className="text-lg font-medium mb-2">
                            {t('reportBuilder.appendices')}:{' '}
                            {t('reportBuilder.financialAssessmentSources')}
                          </h3>
                          <div className="space-y-2">
                            {mockFinancialAssessmentSources.map((source) => (
                              <div
                                key={source.id}
                                className="p-2 bg-muted rounded-md"
                              >
                                <p className="text-sm font-medium">
                                  {source.name}
                                </p>
                                <p className="text-xs text-muted-foreground">
                                  {source.description}
                                </p>
                              </div>
                            ))}
                          </div>
                        </div>
                      )}
                    </div>
                  );
                }

                if (section.type === 'esgAssessment') {
                  return (
                    <div key={section.id} className="space-y-4 group">
                      <div className="flex justify-between items-center">
                        <h2 className="text-xl font-semibold">
                          {section.title}
                        </h2>
                        {isCustomizing && (
                          <Button
                            size="sm"
                            variant="ghost"
                            className="opacity-0 group-hover:opacity-100"
                            onClick={() => openEditSectionDialog(section.id)}
                          >
                            <Edit className="h-4 w-4 mr-1" />
                            Edit Title
                          </Button>
                        )}
                      </div>

                      <div className="space-y-4">
                        {Object.entries(mockEsgAssessmentData).map(
                          ([key, value]) => (
                            <div key={key} className="p-3 border rounded-md">
                              <div className="flex justify-between mb-2">
                                <h3 className="text-md font-medium">
                                  {key
                                    .replace(/([A-Z])/g, ' $1')
                                    .replace(/^./, (str) => str.toUpperCase())}
                                </h3>
                                <div
                                  className={`text-xs px-2 py-1 rounded-full ${
                                    value.rating === 'Satisfactory'
                                      ? 'bg-green-100 text-green-800'
                                      : value.rating === 'Investigate'
                                      ? 'bg-orange-100 text-orange-800'
                                      : 'bg-red-100 text-red-800'
                                  }`}
                                >
                                  {value.rating}
                                </div>
                              </div>
                              <p className="text-sm">{value.assessment}</p>
                            </div>
                          )
                        )}
                      </div>

                      {section.includeSources && (
                        <div className="mt-6 pt-4 border-t">
                          <h3 className="text-lg font-medium mb-2">
                            {t('reportBuilder.appendices')}:{' '}
                            {t('reportBuilder.esgAssessmentSources')}
                          </h3>
                          <div className="space-y-2">
                            {mockEsgAssessmentSources.map((source) => (
                              <div
                                key={source.id}
                                className="p-2 bg-muted rounded-md"
                              >
                                <p className="text-sm font-medium">
                                  {source.name}
                                </p>
                                <p className="text-xs text-muted-foreground">
                                  {source.description}
                                </p>
                              </div>
                            ))}
                          </div>
                        </div>
                      )}
                    </div>
                  );
                }

                if (section.type === 'sdgContributions') {
                  return (
                    <div key={section.id} className="space-y-2 group">
                      <div className="flex justify-between items-center">
                        <h2 className="text-xl font-semibold">
                          {section.title}
                        </h2>
                        {isCustomizing && (
                          <Button
                            size="sm"
                            variant="ghost"
                            className="opacity-0 group-hover:opacity-100"
                            onClick={() => openEditSectionDialog(section.id)}
                          >
                            <Edit className="h-4 w-4 mr-1" />
                            Edit Title
                          </Button>
                        )}
                      </div>
                      <div className="grid grid-cols-2 gap-4">
                        {generatedReport.sdgContributions.map(
                          (sdg: SdgContribution) => (
                            <div
                              key={sdg.sdg}
                              className="flex items-center space-x-3"
                            >
                              <div className="flex-shrink-0">
                                <Image
                                  src={`/icons/goal-${sdg.sdg
                                    .toString()
                                    .padStart(2, '0')}.svg`}
                                  alt={`SDG ${sdg.sdg}`}
                                  width={40}
                                  height={40}
                                  className="h-10 w-10"
                                />
                              </div>
                              <div>
                                <p className="text-sm font-medium">
                                  SDG {sdg.sdg}: {sdg.name}
                                </p>
                                <p className="text-sm text-muted-foreground">
                                  Contribution: {sdg.contribution}
                                </p>
                              </div>
                            </div>
                          )
                        )}
                      </div>
                    </div>
                  );
                }

                if (section.type === 'customText') {
                  return (
                    <div key={section.id} className="space-y-2 group">
                      <div className="flex justify-between items-center">
                        <h2 className="text-xl font-semibold">
                          {section.title}
                        </h2>
                        {isCustomizing && (
                          <Button
                            size="sm"
                            variant="ghost"
                            className="opacity-0 group-hover:opacity-100"
                            onClick={() => openEditSectionDialog(section.id)}
                          >
                            <Edit className="h-4 w-4 mr-1" />
                            Edit
                          </Button>
                        )}
                      </div>
                      <div className="prose prose-sm dark:prose-invert max-w-none">
                        <ReactMarkdown remarkPlugins={[remarkGfm]}>
                          {section.content || ''}
                        </ReactMarkdown>
                      </div>
                    </div>
                  );
                }

                if (section.type === 'aiGenerated') {
                  return (
                    <div key={section.id} className="space-y-2 group">
                      <div className="flex justify-between items-center">
                        <h2 className="text-xl font-semibold">
                          {section.title}
                        </h2>
                        {isCustomizing && !section.isGenerating && (
                          <Button
                            size="sm"
                            variant="ghost"
                            className="opacity-0 group-hover:opacity-100"
                            onClick={() => openEditSectionDialog(section.id)}
                          >
                            <Edit className="h-4 w-4 mr-1" />
                            Edit
                          </Button>
                        )}
                      </div>
                      {section.isGenerating ? (
                        <div className="flex items-center justify-center p-8">
                          <div className="flex flex-col items-center gap-4">
                            <QatalystAiIcon className="h-8 w-8 animate-pulse" />
                            <p className="text-sm">
                              {t('reportBuilder.generating')}
                            </p>
                          </div>
                        </div>
                      ) : (
                        <div className="prose prose-sm dark:prose-invert max-w-none">
                          <ReactMarkdown remarkPlugins={[remarkGfm]}>
                            {section.content || ''}
                          </ReactMarkdown>
                        </div>
                      )}
                    </div>
                  );
                }

                return null;
              })}
            </Card>

            <div className="mt-6">
              <QatalystResponse
                title=""
                prompt={inputValue}
                response="The report has been generated based on available data from the project documents and Qatalyst's analysis. The report highlights key financial metrics, ESG benefits, and SDG contributions. You can customize this report by adding, removing, or reordering sections."
              />
            </div>
          </div>
        )}
      </div>
    </div>
  );
}
